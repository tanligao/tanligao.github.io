<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>工作一周年总结</title>
      <link href="/2018/08/23/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/23/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%91%A8%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul><li>每周都会去趟超市，希望继续维持这个好习惯，如果说医院见证了世间的冷暖，那么超市就是见证人间烟火的地方，每次都控制不住自己，付款之前随便挑的感觉就像回家一样，不知不觉就会花掉 100 多 RMB</li><li>有时候会自己做饭，虽然有点笨手笨脚，但总比外卖来的干净，继续保持</li></ul>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python2 和 python3 兼容指导</title>
      <link href="/2018/08/18/python2%E5%92%8Cpython3%E5%85%BC%E5%AE%B9%E6%8C%87%E5%AF%BC/"/>
      <url>/2018/08/18/python2%E5%92%8Cpython3%E5%85%BC%E5%AE%B9%E6%8C%87%E5%AF%BC/</url>
      <content type="html"><![CDATA[<h3 id="python-2-和-python-3-兼容指导"><a href="#python-2-和-python-3-兼容指导" class="headerlink" title="python 2 和 python 3 兼容指导"></a>python 2 和 python 3 兼容指导</h3><blockquote><p>从 python 2 过渡到 python 3 时，既离不开 python 2，同时又想安装 python 3 来学习，本文给出在安装了 python 2 和 python 3 版本的前提下，如何正确运行对应版本的 python 程序和使用 pip 安装对应版本的包。</p></blockquote><h4 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h4><p>对于 python 2 和 python 3 的安装，可以参考前面的 <a href="/2018/08/15/python安装指导">python安装指导</a>，这里不再重复讲解。</p><h4 id="官方指导"><a href="#官方指导" class="headerlink" title="官方指导"></a>官方指导</h4><blockquote><p>详情见官方指导文档：<a href="https://www.python.org/dev/peps/pep-0397/" target="_blank" rel="noopener">PEP 397 – Python launcher for Windows</a></p></blockquote><a id="more"></a> <h5 id="运行指定版本代码"><a href="#运行指定版本代码" class="headerlink" title="运行指定版本代码"></a>运行指定版本代码</h5><p>Windows 上自带有 py.exe 启动器，同时安装有 python2 和 python3 时，执行 python3 代码时可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -3 test.py</span><br></pre></td></tr></table></figure><p>py.exe 默认使用 python2 版本执行代码，也可以通过指定 <strong>-2</strong> 参数来运行 python2 的代码。</p><p>如果不想每次执行都要输入参数，可以在代码最开始加上一行：</p><ul><li><p>Windows：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! python2</span></span><br></pre></td></tr></table></figure></li><li><p>Linux:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br></pre></td></tr></table></figure></li></ul><p>对于 python3：</p><ul><li><p>Windows：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br></pre></td></tr></table></figure></li><li><p>Linux：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br></pre></td></tr></table></figure></li></ul><p>执行 python 代码时，只需使用下面的命令就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py test.py</span><br></pre></td></tr></table></figure><p>在需要同时指定版本和编码时，需要将版本信息写到编码前面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! python2</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br></pre></td></tr></table></figure><h5 id="pip-安装指定版本的包"><a href="#pip-安装指定版本的包" class="headerlink" title="pip 安装指定版本的包"></a>pip 安装指定版本的包</h5><p>在 Windows 中 python2 和 python3 都分别自带有用于安装和更新包的 pip.exe 工具，当想使用指定版本的 pip 时，需要使用 py.exe 来指定版本参数来安装，使用  <strong>-m pip</strong> 参数来指定运行 pip 工具，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -2 -m pip install xxx</span><br></pre></td></tr></table></figure><h4 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h4><p>网上看到有把 python 3 安装后的 python.exe 修改为 python3.exe 后可以实现方便 python 2 和 python 3 之间的切换，一般默认是使用 python 2。</p><p>这种方法，会导致被改名的 python 对应的 pip 无法使用，解决办法是把被改名的 python 的 pip 改成相应的 pip2/pip3，自己没有试过这种方法，可能会存在其他的问题，不妨一试。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pyinstaller 对 pandas 打包遇到的错误</title>
      <link href="/2018/08/15/pyinstaller%E5%AF%B9pandas%E6%89%93%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2018/08/15/pyinstaller%E5%AF%B9pandas%E6%89%93%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<blockquote><p>在需要把自己写的 python 脚本供其他同事使用时，需要将脚本打包成 exe，就能够在其他没有安装 python 环境的电脑上运行，打包 python 的工具有：py2exe、cx_Freeze、py2app、pyinstaller 等。</p><p>我使用的是相对来说比较方便处理的 pyinstaller 工具，记录下打包过程中遇到的包引用错误。</p></blockquote><h3 id="pyinstaller-参数选项"><a href="#pyinstaller-参数选项" class="headerlink" title="pyinstaller 参数选项"></a>pyinstaller 参数选项</h3><h4 id="pyinstaller-简介"><a href="#pyinstaller-简介" class="headerlink" title="pyinstaller 简介"></a>pyinstaller 简介</h4><p>pyinstaller <a href="https://pythonhosted.org/PyInstaller/" target="_blank" rel="noopener">官网操作文档</a>，pyinstaller 工具能够在 Windows、Mac OS X 和 Linux 上将 python 脚本、Django 或者 PyQt 等打包成可执行文件，可执行文件可以在其他没有 python 环境的电脑上运行，不过有时会出现莫名的问题。</p><a id="more"></a> <p>pyinstaller 打包的基本原理和注意事项：</p><ul><li>pyinstaller 会首先分析出 python 代码使用 import 导入依赖的包和依赖的包使用 import 引入的包，同时会考虑包引入的递归关系，需要注意的是使用 __import__ 函数加载的模块不会被分析到</li><li>如果有使用除 sys.path 之外的路径引入包，则在执行打包命令时，需要以命令行参数的形式给出，或者添加到 script.spec 中的 sys.path 变量中，script.spec 为执行打包命令后生成的可修改的配置文件</li><li>pyinstaller 会把依赖包和源脚本文件的 *.py 编译成 *.pyc 文件，打包生成的文件在 dist 目录下</li><li>打包生成可执行文件的方式分为两种：<ul><li>one-folder: 依赖文件和可执行文件都放到同一个目录下，pyinstaller 默认使用的是这种方式</li><li>one-file: 所有的依赖文件被压缩到一个可执行文件中，需要在执行打包命令时加上 -F 参数</li></ul></li><li>可执行文件一般启动较慢，原因是在执行会先启动 pyinstaller 引导程序，引导程序会创建一个临时的 python 环境，这使得 python 解释器能够找到程序依赖的包和库，由于 one-file 的包和库需要被引导程序解压之后才能使用，所以 one-file 的方式执行往往比 one-folder 更慢</li></ul><h4 id="pyinstaller-命令行参数选项："><a href="#pyinstaller-命令行参数选项：" class="headerlink" title="pyinstaller 命令行参数选项："></a>pyinstaller 命令行参数选项：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller</span><br><span class="line">usage: pyinstaller script.py [-h] [-v] [-D] [-F] [--specpath DIR] [-n NAME]</span><br><span class="line">                             [-p DIR] [--hidden-import MODULENAME]</span><br><span class="line">                             [--additional-hooks-dir HOOKSPATH]</span><br><span class="line">                             [--runtime-hook RUNTIME_HOOKS]</span><br><span class="line">                             [--exclude-module EXCLUDES] [--key KEY] [-d] [-s]</span><br><span class="line">                             [--noupx] [-c] [-w]</span><br><span class="line">                             [-i &lt;FILE.ico or FILE.exe,ID or FILE.icns&gt;]</span><br><span class="line">                             [--version-file FILE] [-m &lt;FILE or XML&gt;]</span><br><span class="line">                             [-r RESOURCE] [--uac-admin] [--uac-uiaccess]</span><br><span class="line">                             [--win-private-assemblies]</span><br><span class="line">                             [--win-no-prefer-redirects]</span><br><span class="line">                             [--osx-bundle-identifier BUNDLE_IDENTIFIER]</span><br><span class="line">                             [--distpath DIR] [--workpath WORKPATH] [-y]</span><br><span class="line">                             [--upx-dir UPX_DIR] [-a] [--clean]</span><br><span class="line">                             [--<span class="built_in">log</span>-level LEVEL] [--upx UPX]</span><br><span class="line">                             scriptname [scriptname ...]</span><br><span class="line"></span><br><span class="line">pyinstaller option 还是挺多的，这里列出我常用的几个说明一下：</span><br><span class="line">-D, --one-dir 打包成一个文件夹，默认</span><br><span class="line">-F, --one-file 打包成一个 exe 文件,exe 中会压缩 python 脚本所引入和依赖的包，导致 exe 文件较大</span><br><span class="line">-p DIR, --paths DIR 添加路径，一般用来添加程序所用到的包的所在位置</span><br><span class="line">-c, --console, --nowindowed 提供程序视窗（黑窗口），程序有输入输出的界面，默认</span><br><span class="line">-w, --windowed, --noconsole 无视窗，程序后台运行</span><br><span class="line">-i &lt;FILE.ico or FILE.exe,ID or FILE.icns&gt;, --icon &lt;FILE.ico or FILE.exe,ID or FILE.icns&gt; 添加icon 图标</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包成一个 exe 文件，同时不会弹出黑窗口（这是我常用的打包命令）</span></span><br><span class="line">pyinstaller -F -w script.py</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><h4 id="错误情况"><a href="#错误情况" class="headerlink" title="错误情况"></a>错误情况</h4><p>使用 pyinstaller 打包 python 脚本时候，脚本中主要用到了 pandas 相关包，打包显示成功，但是在其他电脑上运行时出现缺少 timedeltas 模块。</p><p>打包使用的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F test.py</span><br></pre></td></tr></table></figure><h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: C extension: No module named <span class="string">'pandas._libs.tslibs.timedeltas'</span></span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>修改打包命令，使用 –hidden-import 隐藏后面所接模块的引用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F test.py --hidden-import=pandas._libs.tslibs.timedeltas</span><br></pre></td></tr></table></figure><blockquote><p>2018 年 3 月 31 日，深圳，夜已深</p></blockquote>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python2 编码全攻略</title>
      <link href="/2018/08/15/python2%E7%BC%96%E7%A0%81%E5%85%A8%E6%94%BB%E7%95%A5/"/>
      <url>/2018/08/15/python2%E7%BC%96%E7%A0%81%E5%85%A8%E6%94%BB%E7%95%A5/</url>
      <content type="html"><![CDATA[<blockquote><p>python 2 默认使用 ASCII 编码</p></blockquote><p>– 待续</p><a id="more"></a> <blockquote><p>2018 年 3 月 25 日，深圳，夜已深</p></blockquote>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python 安装指导</title>
      <link href="/2018/08/15/python%E5%AE%89%E8%A3%85%E6%8C%87%E5%AF%BC/"/>
      <url>/2018/08/15/python%E5%AE%89%E8%A3%85%E6%8C%87%E5%AF%BC/</url>
      <content type="html"><![CDATA[<h3 id="python-安装指导"><a href="#python-安装指导" class="headerlink" title="python 安装指导"></a>python 安装指导</h3><h4 id="python-2-7-安装流程："><a href="#python-2-7-安装流程：" class="headerlink" title="python 2.7 安装流程："></a>python 2.7 安装流程：</h4><blockquote><p>python 3.5 类似</p></blockquote><ul><li><p>官网下载安装包：<a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a> </p><ul><li>ps：最好选择 python 2.7.9 及其以上版本，此系列版本集成了包管理工具 pip，手动安装 pip 包管理工具比较麻烦</li></ul></li><li><p>最好更改 pip 包下载镜像地址，国外地址可能不够稳定，容易下载失败，可以选择清华大学或者豆瓣的镜像，地址：</p><ul><li>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li><li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><p>临时使用镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple package</span><br></pre></td></tr></table></figure></li></ul>  <a id="more"></a> <p>  永久修改默认下载地址：</p><ul><li><p>Linux下，修改或者创建 ~/.pip/pip.conf 文件，改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>Windows下，修改或者创建 C:\Users\xx\pip\pip.ini，改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>pip 下载安装包时，使用命令：pip install -i package</p></li></ul><blockquote><p>2018 年 3 月 22 日，深圳，夜已深</p></blockquote>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/10/hello-world/"/>
      <url>/2018/08/10/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a> <h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>2018 年 8 月 10 日，深圳，夜已深</p></blockquote>]]></content>
      
      
    </entry>
    
  
  
</search>
